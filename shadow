package Project3;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import javax.swing.JProgressBar;

/**
 * RadixSort class takes an Array of integers and sorts it via Radix Sort algorithm
 * Updates a progress bar with the progress of the Array being sorted
 * @author Jake and some online source, I honestly can't find a name, proper credit is given within the class
 *
 */
public class RadixSort implements Runnable {

	private Integer[] data;
	private double progressCount = 0.0;
	private int numberOfPasses = 0;
	private long startTime, finishTime, timeElapsed;
	JProgressBar bar;	
	
	/**
	 * Constructor
	 * @param data
	 * @param bar
	 */
	public RadixSort (Integer[] data, JProgressBar bar)
	{
		this.data = data;
		this.bar = bar;
	}
	
	
	/* (non-Javadoc)
	 * @see java.lang.Runnable#run()
	 */
	public void run()
	{
		startTime = System.nanoTime();
		radixSort();
		finishTime = System.nanoTime();
		timeElapsed = finishTime - startTime;
		System.out.println("Radix " + timeElapsed);
		outputToFile();
	}
	
    /**
     * This method for a Radix Sort was retrieved from http://rosettacode.org/wiki/Sorting_algorithms/Radix_sort#Java
     */
	private void radixSort() {
	    // Loop for every bit in the integers
	    for (int shift = Integer.SIZE - 1; shift > -1; shift--) 
	    {  
		    
	        // The array to put the partially sorted array into
	        Integer[] tmp = new Integer[data.length];
	        // The number of 0s
	        int j = 0;
	 
	        // Move the 0s to the new array, and the 1s to the old one
	        for (int i = 0; i < data.length; i++) {
	            // If there is a 1 in the bit we are testing, the number will be negative
	            boolean move = data[i] << shift >= 0;
	 
	            // If this is the last bit, negative numbers are actually lower
	            if (shift == 0 ? !move : move) {
	                tmp[j] = data[i];
	                j++;
	            } else {
	                // It's a 1, so stick it in the old array for now
	                data[i - j] = data[i];
	            }
	        }
	 
	        // Copy over the 1s from the old array
	        for (int i = j; i < tmp.length; i++) {
	            tmp[i] = data[i - j];
	        }
	 
	        // And now the tmp array gets switched for another round of sorting
	        numberOfPasses++;
        	getProgress();
	    }
	 
	}

	
	private void getProgress()
	  {
	  	int result;
	  	//progressCount = 1 - (((double)data.length - (double)numberOfPasses)/(double)data.length);
	  	//result = (int) (progressCount * 100);
	  	//System.out.println(numberOfPasses);
	  	progressCount = numberOfPasses * 3.13;
	  	result = (int)progressCount;
	  	bar.setValue(result);
	  	
	  }
	
	private void outputToFile() {
		File outputFile = new File("output.dat");
		try {
			PrintWriter outStream = new PrintWriter(new FileWriter(outputFile, true));
			outStream.append("\nRadixSort Thread elapsed in " + timeElapsed + " nanoseconds \r");
			outStream.close();
		} catch (IOException e) {
			System.out.println("RadixSort didn't write.. gg");
		}
		
	}
	
}
